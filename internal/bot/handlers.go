package bot

import (
	"fmt"
	"log"
	"runtime"
	"time"

	"go-vpn-bot/internal/database"
	"go-vpn-bot/internal/marzban"

	config "go-vpn-bot/configs"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type BotHandler struct {
	Bot *tgbotapi.BotAPI
	DB  *database.DB
}

func logWithLocation(format string, args ...interface{}) {
	pc, file, line, ok := runtime.Caller(1)

	if !ok {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ –≤—ã–∑–æ–≤–∞")
		return
	}

	funcName := runtime.FuncForPC(pc).Name()
	location := log.Prefix() + file + ":" + funcName + ":" + string(line)
	log.Printf(location+" "+format, args...)
}

func (h *BotHandler) StartDailySubscriptionCheck() {
	location, err := time.LoadLocation("Europe/Moscow")

	if err != nil {
		logWithLocation("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ %v", err)
		return
	}

	for {
		now := time.Now().In(location)
		nextRun := time.Date(now.Year(), now.Month(), now.Day(), 19, 0, 0, 0, location)

		if now.After(nextRun) {
			nextRun = nextRun.Add(24 * time.Hour)
		}

		duration := nextRun.Sub(now)
		log.Printf("–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ %v", nextRun)

		time.Sleep(duration)

		h.CheckSubscriptionsAndNotify()
	}
}

func (h *BotHandler) notifyUser(user database.User, message string) {
	msg := tgbotapi.NewMessage(user.ID, message)
	_, err := h.Bot.Send(msg)
	if err != nil {
		logWithLocation("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", user.ID, err)
	}
}

func (h *BotHandler) CheckSubscriptionsAndNotify() {
	users, err := h.DB.GetAllUsers()

	if err != nil {
		logWithLocation("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π %v", err)
		return
	}

	var checkedCount, deletedCount int
	now := time.Now()

	for _, user := range users {
		subscriptionEnd := user.SubscriptionEndDate.Time
		daysLeft := int(subscriptionEnd.Sub(now).Hours()/24) + 1
		log.Printf("–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: %d", daysLeft)

		// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 3 –¥–Ω—è
		if daysLeft == 3 {
			h.notifyUser(user, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏.")
		}

		// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å
		if daysLeft == 1 {
			h.notifyUser(user, "–í–Ω–∏–º–∞–Ω–∏–µ! –ó–∞–≤—Ç—Ä–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å!")
		}

		if !user.IsFriend && user.IsActive && subscriptionEnd.Before(now) {
			configs := []string{user.Config1, user.Config2, user.Config3}

			for i, configUser := range configs {
				if configUser != "" {
					cfg, err := config.LoadConfig()
					if err != nil {
						logWithLocation("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
						return
					}

					err = marzban.DeleteUser(cfg.Marzban.APIURL, cfg.Marzban.APIKey, fmt.Sprintf("%d_device%d", user.ID, i+1))
					if err != nil {
						logWithLocation("–ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
						// –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
						newAPIKey, err := marzban.GetAPIKey(cfg.Marzban.APIURL, cfg.Marzban.Username, cfg.Marzban.Password)
						if err != nil {
							logWithLocation("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω: %v", err)
							return
						}

						err = marzban.UpdateAPIKey("configs/config.yaml", newAPIKey)
						if err != nil {
							logWithLocation("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥: %v", err)
							return
						}

						// –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å CreateUser
						cfg.Marzban.APIKey = newAPIKey // –û–±–Ω–æ–≤–ª—è–µ–º APIKey –≤ –ø–∞–º—è—Ç–∏
						err = marzban.DeleteUser(cfg.Marzban.APIURL, cfg.Marzban.APIKey, fmt.Sprintf("%d_device%d", user.ID, i+1))
						if err != nil {
							logWithLocation("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: %v", err)
							return
						}
					}
					h.DB.UpdateUserConfig(user.ID, i+1, "")
				}
				err = h.DB.UpdateTrialStatus(user.ID, false)
				if err != nil {
					logWithLocation("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", user.ID, err)
					return
				}

				err = h.DB.UpdateActiveStatus(user.ID, false)
				if err != nil {
					logWithLocation("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", user.ID, err)
					return
				}
			}
			deletedCount++
		}
		if !user.IsFriend {
			checkedCount++
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Telegram-–∫–∞–Ω–∞–ª
		h.SendCheckResults(checkedCount, deletedCount)
	}
}

func (h *BotHandler) SendCheckResults(checkedCount, deletedCount int) {
	// ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
	channelID := "-1002480497483" // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	messageText := fmt.Sprintf("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d\n–£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d", checkedCount, deletedCount)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
	msg := tgbotapi.NewMessageToChannel(channelID, messageText)
	if _, err := h.Bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: %v", err)
	}
}

func (h *BotHandler) SendSubscriptionInfo(callback *tgbotapi.CallbackQuery) {
	// ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
	channelID := "-1002480497483" // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	messageText := fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –ø–æ–ª—É—á–∏–ª —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥!", callback.Message.Chat.ID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
	msg := tgbotapi.NewMessageToChannel(channelID, messageText)
	if _, err := h.Bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: %v", err)
	}
}

func (h *BotHandler) HandleMessage(message *tgbotapi.Message) {
	switch message.Text {
	case "/start":
		h.handleStart(message)
	case "/check":
		h.CheckSubscriptionsAndNotify()
	default:
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /start")
		if _, err := h.Bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
	}
}

func (h *BotHandler) handleStart(message *tgbotapi.Message) {
	user := h.DB.GetUserByID(message.Chat.ID)
	if user == nil {
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å 7 –¥–Ω—è–º–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
		cfg, err := config.LoadConfig()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
			msg := tgbotapi.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
			if _, err := h.Bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			}
			return
		}
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
		err = h.DB.CreateUser(message.Chat.ID, cfg.App.TestPeriodDays)
		if err != nil {
			msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
			if _, err := h.Bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			}
			return
		}

		// –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		welcomeText := "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Boo VPN!\n\n" +
			"üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n" +
			"üåç –î–æ—Å—Ç—É–ø –∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–∞–π—Ç–∞–º\n" +
			"üìà –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å"

		// –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É
		button := tgbotapi.NewInlineKeyboardButtonData("üöÄ –ü–æ–µ—Ö–∞–ª–∏!", "get_started")
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(button),
		)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
		msg := tgbotapi.NewMessage(message.Chat.ID, welcomeText)
		msg.ReplyMarkup = keyboard
		if _, err := h.Bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		return
	}

	trialEnd := user.SubscriptionEndDate.Time
	daysRemaining := int(trialEnd.Sub(time.Now()).Hours() / 24)
	var text string
	if user.IsTrial {
		text = fmt.Sprintf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: %d\n\n"+
			"–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ–±–∞–≤–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π.", daysRemaining+1)
	}

	if !user.IsTrial {
		text = fmt.Sprintf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: %d\n\n", daysRemaining+1)
	}

	if !user.IsActive {
		text = "–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º."
	}

	if user.IsFriend {
		text = "–¢—ã –ø–æ–ª—å–∑—É–µ—à—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
	}

	// –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
	buttonPay := tgbotapi.NewInlineKeyboardButtonData("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "pay_method")
	buttonConfigs := tgbotapi.NewInlineKeyboardButtonData("üì∂ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏", "get_config")
	buttonSupport := tgbotapi.NewInlineKeyboardButtonData("üÜò –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", "get_support")
	buttonGuide := tgbotapi.NewInlineKeyboardButtonData("‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "get_guide")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(buttonPay),
		tgbotapi.NewInlineKeyboardRow(buttonConfigs),
		tgbotapi.NewInlineKeyboardRow(buttonSupport),
		tgbotapi.NewInlineKeyboardRow(buttonGuide),
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	if _, err := h.Bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ: %v", err)
	}
}

func (h *BotHandler) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: %s", callback.Data) // –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	switch callback.Data {
	case "get_started":
		h.SendSubscriptionInfo(callback)
		configUser := h.DB.GetUserConfig(callback.Message.Chat.ID, 1)
		if configUser == "" {
			username := fmt.Sprintf("%d_device1", callback.Message.Chat.ID)

			cfg, err := config.LoadConfig()
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
				msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
				if _, err := h.Bot.Send(msg); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
				}
				return
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Marzban
			userResp, err := marzban.CreateUser(cfg.Marzban.APIURL, cfg.Marzban.APIKey, username)
			if err != nil {
				log.Printf("–ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
				// –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
				newAPIKey, err := marzban.GetAPIKey(cfg.Marzban.APIURL, cfg.Marzban.Username, cfg.Marzban.Password)
				if err != nil {
					log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω: %v", err)
					msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
					h.Bot.Send(msg)
					return
				}

				err = marzban.UpdateAPIKey("configs/config.yaml", newAPIKey)
				if err != nil {
					log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥: %v", err)
					msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
					h.Bot.Send(msg)
					return
				}

				// –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å CreateUser
				cfg.Marzban.APIKey = newAPIKey // –û–±–Ω–æ–≤–ª—è–µ–º APIKey –≤ –ø–∞–º—è—Ç–∏
				userResp, err = marzban.CreateUser(cfg.Marzban.APIURL, cfg.Marzban.APIKey, username)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: %v", err)
					msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
					h.Bot.Send(msg)
					return
				}
			}

			if !userResp.Success {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Marzban –¥–ª—è %d: %s", callback.Message.Chat.ID, userResp.Message)
				msg := tgbotapi.NewMessage(callback.Message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %s", userResp.Message))
				if _, err := h.Bot.Send(msg); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
				}
				return
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			err = h.DB.UpdateUserConfig(callback.Message.Chat.ID, 1, userResp.Message)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –≤ –±–∞–∑–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", callback.Message.Chat.ID, err)
				msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
				if _, err := h.Bot.Send(msg); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
				}
				return
			}
			configUser = h.DB.GetUserConfig(callback.Message.Chat.ID, 1)
		}

		// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ
		guideText := "–ì–∞–π–¥ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ\n\n" +
			"–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É\n\n" +
			"–í—ã —É–≤–∏–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n\n" +
			"–¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n" +
			"üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã\n\n" +
			"üü¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –∏ –æ–Ω —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n" +
			"```\n" + configUser + "\n```"

		// –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É
		buttonIOS := tgbotapi.NewInlineKeyboardButtonData("üì± iOS", "get_ios_guide")
		buttonAndroid := tgbotapi.NewInlineKeyboardButtonData("üì± Android", "get_android_guide")
		buttonWindows := tgbotapi.NewInlineKeyboardButtonData("üñ• Windows", "get_windows_guide")
		buttonMac := tgbotapi.NewInlineKeyboardButtonData("üñ• MacOS", "get_mac_guide")
		buttonMain := tgbotapi.NewInlineKeyboardButtonData("üè° –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "get_main")
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(buttonIOS, buttonAndroid),
			tgbotapi.NewInlineKeyboardRow(buttonMac, buttonWindows),
			tgbotapi.NewInlineKeyboardRow(buttonMain),
		)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
		editMsg := tgbotapi.NewEditMessageTextAndMarkup(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			guideText,
			keyboard,
		)

		editMsg.ParseMode = "MarkdownV2"

		if _, err := h.Bot.Send(editMsg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback
		callbackResp := tgbotapi.NewCallback(callback.ID, "–í—ã –Ω–∞—á–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º!")
		if _, err := h.Bot.Request(callbackResp); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ CallbackQuery: %v", err)
		}
	case "get_main":
		user := h.DB.GetUserByID(callback.Message.Chat.ID)
		if user == nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
			return
		}

		trialEnd := user.SubscriptionEndDate.Time
		daysRemaining := int(trialEnd.Sub(time.Now()).Hours() / 24)
		var text string
		if user.IsTrial {
			text = fmt.Sprintf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: %d\n\n"+
				"–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ–±–∞–≤–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π.", daysRemaining+1)
		}

		if !user.IsTrial {
			text = fmt.Sprintf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: %d\n\n", daysRemaining+1)
		}

		if !user.IsActive {
			text = "–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º."
		}

		if user.IsFriend {
			text = "–¢—ã –ø–æ–ª—å–∑—É–µ—à—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
		}

		// –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
		buttonPay := tgbotapi.NewInlineKeyboardButtonData("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "pay_method")
		buttonConfigs := tgbotapi.NewInlineKeyboardButtonData("üì∂ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏", "get_config")
		buttonSupport := tgbotapi.NewInlineKeyboardButtonData("üÜò –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", "get_support")
		buttonGuide := tgbotapi.NewInlineKeyboardButtonData("‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "get_guide")

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(buttonPay),
			tgbotapi.NewInlineKeyboardRow(buttonConfigs),
			tgbotapi.NewInlineKeyboardRow(buttonSupport),
			tgbotapi.NewInlineKeyboardRow(buttonGuide),
		)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
		editMsg := tgbotapi.NewEditMessageTextAndMarkup(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			text,
			keyboard,
		)

		if _, err := h.Bot.Send(editMsg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback
		callbackResp := tgbotapi.NewCallback(callback.ID, "–í—ã–ø–æ–ª–Ω–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
		if _, err := h.Bot.Request(callbackResp); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ CallbackQuery: %v", err)
		}
	case "get_config":
		user := h.DB.GetUserByID(callback.Message.Chat.ID)
		if user == nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
			return
		}

		text := "üì∂ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏\n\n" +
			"–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ñ–∏–≥, –ª–∏–±–æ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π\\."

		button1 := tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", "new_device1")
		button2 := tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", "new_device2")
		button3 := tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", "new_device3")
		buttonMain := tgbotapi.NewInlineKeyboardButtonData("üè° –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "get_main")
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(button1),
			tgbotapi.NewInlineKeyboardRow(button2),
			tgbotapi.NewInlineKeyboardRow(button3),
			tgbotapi.NewInlineKeyboardRow(buttonMain),
		)

		configs := []string{user.Config1, user.Config2, user.Config3}

		if configs[0] != "" && configs[1] == "" && configs[2] == "" {
			button1 = tgbotapi.NewInlineKeyboardButtonData("üì± –û—Ç–∫—Ä—ã—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1", "get_device1")
			button2 = tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", "new_device2")
			button3 = tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", "new_device3")
			keyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(button1),
				tgbotapi.NewInlineKeyboardRow(button2),
				tgbotapi.NewInlineKeyboardRow(button3),
				tgbotapi.NewInlineKeyboardRow(buttonMain),
			)
		}

		if configs[0] != "" && configs[1] != "" && configs[2] == "" {
			button1 = tgbotapi.NewInlineKeyboardButtonData("üì± –û—Ç–∫—Ä—ã—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1", "get_device1")
			button2 = tgbotapi.NewInlineKeyboardButtonData("üì± –û—Ç–∫—Ä—ã—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 2", "get_device2")
			button3 = tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", "new_device3")
			keyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(button1),
				tgbotapi.NewInlineKeyboardRow(button2),
				tgbotapi.NewInlineKeyboardRow(button3),
				tgbotapi.NewInlineKeyboardRow(buttonMain),
			)
		}

		if configs[0] != "" && configs[1] != "" && configs[2] != "" {
			button1 = tgbotapi.NewInlineKeyboardButtonData("üì± –û—Ç–∫—Ä—ã—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1", "get_device1")
			button2 = tgbotapi.NewInlineKeyboardButtonData("üì± –û—Ç–∫—Ä—ã—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 2", "get_device2")
			button3 = tgbotapi.NewInlineKeyboardButtonData("üì± –û—Ç–∫—Ä—ã—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 3", "get_device3")
			keyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(button1),
				tgbotapi.NewInlineKeyboardRow(button2),
				tgbotapi.NewInlineKeyboardRow(button3),
				tgbotapi.NewInlineKeyboardRow(buttonMain),
			)
		}

		if configs[0] == "" && configs[1] != "" && configs[2] == "" {
			button1 = tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", "new_device1")
			button2 = tgbotapi.NewInlineKeyboardButtonData("üì± –û—Ç–∫—Ä—ã—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 2", "get_device2")
			button3 = tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", "new_device3")
			keyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(button1),
				tgbotapi.NewInlineKeyboardRow(button2),
				tgbotapi.NewInlineKeyboardRow(button3),
				tgbotapi.NewInlineKeyboardRow(buttonMain),
			)
		}

		if configs[0] == "" && configs[1] != "" && configs[2] != "" {
			button1 = tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", "new_device1")
			button2 = tgbotapi.NewInlineKeyboardButtonData("üì± –û—Ç–∫—Ä—ã—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 2", "get_device2")
			button3 = tgbotapi.NewInlineKeyboardButtonData("üì± –û—Ç–∫—Ä—ã—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 3", "get_device3")
			keyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(button1),
				tgbotapi.NewInlineKeyboardRow(button2),
				tgbotapi.NewInlineKeyboardRow(button3),
				tgbotapi.NewInlineKeyboardRow(buttonMain),
			)
		}

		if configs[0] == "" && configs[1] == "" && configs[2] != "" {
			button1 = tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", "new_device1")
			button2 = tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", "new_device2")
			button3 = tgbotapi.NewInlineKeyboardButtonData("üì± –û—Ç–∫—Ä—ã—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 3", "get_device3")
			keyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(button1),
				tgbotapi.NewInlineKeyboardRow(button2),
				tgbotapi.NewInlineKeyboardRow(button3),
				tgbotapi.NewInlineKeyboardRow(buttonMain),
			)
		}

		if configs[0] != "" && configs[1] == "" && configs[2] != "" {
			button1 = tgbotapi.NewInlineKeyboardButtonData("üì± –û—Ç–∫—Ä—ã—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1", "get_device1")
			button2 = tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", "new_device2")
			button3 = tgbotapi.NewInlineKeyboardButtonData("üì± –û—Ç–∫—Ä—ã—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 3", "get_device3")
			keyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(button1),
				tgbotapi.NewInlineKeyboardRow(button2),
				tgbotapi.NewInlineKeyboardRow(button3),
				tgbotapi.NewInlineKeyboardRow(buttonMain),
			)
		}

		if !user.IsActive {
			text = "–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º\\."
			buttonPay := tgbotapi.NewInlineKeyboardButtonData("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "pay_method")
			keyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(buttonPay),
				tgbotapi.NewInlineKeyboardRow(buttonMain),
			)
		}

		editMsg := tgbotapi.NewEditMessageTextAndMarkup(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			text,
			keyboard,
		)

		editMsg.ParseMode = "MarkdownV2"

		if _, err := h.Bot.Send(editMsg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é —Å –∫–æ–Ω—Ñ–∏–≥–∞–º–∏: %v", err)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback
		callbackResp := tgbotapi.NewCallback(callback.ID, "–û—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤!")
		if _, err := h.Bot.Request(callbackResp); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ CallbackQuery: %v", err)
		}
	case "get_device1":
		h.handleDeviceCallback(callback, 1)
	case "get_device2":
		h.handleDeviceCallback(callback, 2)
	case "get_device3":
		h.handleDeviceCallback(callback, 3)
	case "delete_device1":
		h.handleDeleteDevice(callback, 1)
	case "delete_device2":
		h.handleDeleteDevice(callback, 2)
	case "delete_device3":
		h.handleDeleteDevice(callback, 3)
	case "new_device1":
		h.handleNewDevice(callback, 1)
	case "new_device2":
		h.handleNewDevice(callback, 2)
	case "new_device3":
		h.handleNewDevice(callback, 3)
	default:
		log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: %s", callback.Data)
	}
}

func (h *BotHandler) sendDeviceConfig(callback *tgbotapi.CallbackQuery, deviceNumber int, userConfig string) {
	var text string
	var keyboard tgbotapi.InlineKeyboardMarkup

	if userConfig == "" {
		text = fmt.Sprintf("üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %d\n\n–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\\.", deviceNumber)
		buttonPay := tgbotapi.NewInlineKeyboardButtonData("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "pay_method")
		buttonMain := tgbotapi.NewInlineKeyboardButtonData("üè° –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "get_main")
		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(buttonPay),
			tgbotapi.NewInlineKeyboardRow(buttonMain),
		)
	} else {
		text = fmt.Sprintf(
			"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %d\n\n–¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\nüá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã\n\nüü¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –∏ –æ–Ω —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n```\n%s\n```",
			deviceNumber,
			userConfig,
		)

		buttonDelete := tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ %d", deviceNumber), fmt.Sprintf("delete_device%d", deviceNumber))
		buttonBack := tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "get_config")
		buttonMain := tgbotapi.NewInlineKeyboardButtonData("üè° –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "get_main")
		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(buttonDelete),
			tgbotapi.NewInlineKeyboardRow(buttonBack),
			tgbotapi.NewInlineKeyboardRow(buttonMain),
		)
	}

	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		keyboard,
	)
	editMsg.ParseMode = "MarkdownV2"

	if _, err := h.Bot.Send(editMsg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %d: %v", deviceNumber, err)
	}

	// –û—Ç–≤–µ—Ç –Ω–∞ callback
	callbackResp := tgbotapi.NewCallback(callback.ID, "–û—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤!")
	if _, err := h.Bot.Request(callbackResp); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ CallbackQuery: %v", err)
	}
}

func (h *BotHandler) handleDeviceCallback(callback *tgbotapi.CallbackQuery, deviceNumber int) {
	user := h.DB.GetUserByID(callback.Message.Chat.ID)
	if user == nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}

	var userConfig string
	switch deviceNumber {
	case 1:
		userConfig = user.Config1
	case 2:
		userConfig = user.Config2
	case 3:
		userConfig = user.Config3
	default:
		log.Printf("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %d", deviceNumber)
		return
	}

	h.sendDeviceConfig(callback, deviceNumber, userConfig)
}

func (h *BotHandler) handleDeleteDevice(callback *tgbotapi.CallbackQuery, deviceNumber int) {
	user := h.DB.GetUserByID(callback.Message.Chat.ID)
	if user == nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}

	var userConfig string
	switch deviceNumber {
	case 1:
		userConfig = user.Config1
	case 2:
		userConfig = user.Config2
	case 3:
		userConfig = user.Config3
	default:
		log.Printf("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %d", deviceNumber)
		return
	}

	text := fmt.Sprintf("üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %d\n\n–ö–æ–Ω—Ñ–∏–≥ –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É–¥–∞–ª–µ–Ω\\.", deviceNumber)
	buttonBack := tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "get_config")
	buttonMain := tgbotapi.NewInlineKeyboardButtonData("üè° –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "get_main")
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(buttonBack),
		tgbotapi.NewInlineKeyboardRow(buttonMain),
	)

	if userConfig != "" {
		if err := deleteUserFromMarzban(user.ID, deviceNumber); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Marzban: %v", err)
			text = fmt.Sprintf("üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %d\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.", deviceNumber)
		} else {
			h.DB.UpdateUserConfig(user.ID, deviceNumber, "")
		}
	}

	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		keyboard,
	)
	editMsg.ParseMode = "MarkdownV2"

	if _, err := h.Bot.Send(editMsg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	callbackResp := tgbotapi.NewCallback(callback.ID, "–û—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤!")
	if _, err := h.Bot.Request(callbackResp); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ CallbackQuery: %v", err)
	}
}

func deleteUserFromMarzban(userID int64, deviceNumber int) error {
	cfg, err := config.LoadConfig()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %w", err)
	}

	username := fmt.Sprintf("%d_device%d", userID, deviceNumber)
	err = marzban.DeleteUser(cfg.Marzban.APIURL, cfg.Marzban.APIKey, username)
	if err != nil {
		newAPIKey, err := marzban.GetAPIKey(cfg.Marzban.APIURL, cfg.Marzban.Username, cfg.Marzban.Password)
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω: %w", err)
		}
		if err = marzban.UpdateAPIKey("configs/config.yaml", newAPIKey); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %w", err)
		}

		cfg.Marzban.APIKey = newAPIKey
		if err = marzban.DeleteUser(cfg.Marzban.APIURL, cfg.Marzban.APIKey, username); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: %w", err)
		}
	}
	return nil
}

func (h *BotHandler) handleNewDevice(callback *tgbotapi.CallbackQuery, deviceNumber int) {
	userID := callback.Message.Chat.ID

	configUser := h.DB.GetUserConfig(userID, deviceNumber)
	if configUser != "" {
		log.Printf("–ö–æ–Ω—Ñ–∏–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
		return
	}

	userResp, err := createUserMarzban(userID, deviceNumber)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %v", err)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	if err := h.DB.UpdateUserConfig(userID, deviceNumber, userResp.Message); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %v", err)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	text := fmt.Sprintf(
		"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %d\n\n–¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\nüá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã\n\nüü¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –∏ –æ–Ω —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n```\n%s\n```",
		deviceNumber, userResp.Message,
	)

	// –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", fmt.Sprintf("delete_device%d", deviceNumber))),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "get_config")),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üè° –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "get_main")),
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		keyboard,
	)
	editMsg.ParseMode = "MarkdownV2"

	if _, err := h.Bot.Send(editMsg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	callbackResp := tgbotapi.NewCallback(callback.ID, "–û—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤!")
	if _, err := h.Bot.Request(callbackResp); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ CallbackQuery: %v", err)
	}
}

func createUserMarzban(userID int64, deviceNumber int) (*marzban.UserResponse, error) {
	cfg, err := config.LoadConfig()
	if err != nil {
		return nil, fmt.Errorf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %w", err)
	}

	username := fmt.Sprintf("%d_device%d", userID, deviceNumber)
	userResp, err := marzban.CreateUser(cfg.Marzban.APIURL, cfg.Marzban.APIKey, username)
	if err != nil {
		newAPIKey, err := marzban.GetAPIKey(cfg.Marzban.APIURL, cfg.Marzban.Username, cfg.Marzban.Password)
		if err != nil {
			return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω: %w", err)
		}
		if err = marzban.UpdateAPIKey("configs/config.yaml", newAPIKey); err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %w", err)
		}

		cfg.Marzban.APIKey = newAPIKey
		userResp, err = marzban.CreateUser(cfg.Marzban.APIURL, cfg.Marzban.APIKey, username)
		if err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: %w", err)
		}
	}
	return userResp, nil
}

func (h *BotHandler) HandleUpdate(update tgbotapi.Update) {
	// –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	log.Printf("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: %+v", update)

	if update.CallbackQuery != nil {
		log.Printf("–ü–æ–ª—É—á–µ–Ω callback: %s", update.CallbackQuery.Data)
		h.handleCallbackQuery(update.CallbackQuery)
		return
	}

	if update.Message != nil {
		h.HandleMessage(update.Message)
	}
}
